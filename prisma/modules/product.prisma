// prisma/modules/product.prisma
// Product, categories, attributes, specifications, images, variants, reviews, warranty

model Category {
  id             String    @id @default(cuid())
  name           String
  slug           String    @unique
  image          String?
  parentId       String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  parent         Category? @relation("CategoryToChildren", fields: [parentId], references: [id], onDelete: Cascade)
  children       Category[] @relation("CategoryToChildren")
  attributes     CategoryAttribute[]
  specifications CategorySpecification[]
  products       Product[]

  @@map("categories")
}
model CategoryAttribute {
  id           String   @id @default(cuid())
  categoryId   String
  attributeId  String
  isRequired   Boolean  @default(false)
  isForVariant Boolean  @default(true)
  filterable   Boolean  @default(true)

  attribute Attribute @relation(fields: [attributeId], references: [id], onDelete: Cascade)
  category  Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([categoryId, attributeId])
  @@map("category_attributes")
}

model Attribute {
  id         String   @id @default(cuid())
  name       String
  slug       String   @unique
  type       AttributeType
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())

  values     AttributeValue[]
  categories CategoryAttribute[]
  productSettings ProductAttributeSetting[]

  @@map("attributes")
}

enum AttributeType {
  TEXT
  NUMBER
  BOOLEAN
  SELECT
}

model AttributeValue {
  id          String   @id @default(cuid())
  value       String
  attributeId String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())

  attribute   Attribute @relation(fields: [attributeId], references: [id], onDelete: Cascade)
  variants    ProductVariantAttribute[]

  @@map("attribute_values")
}

model Product {
  id                String                      @id @default(cuid())
  name              String
  description       String?
  slug              String                      @unique
  vendorId          String
  categoryId        String
  createdAt         DateTime                    @default(now())
  updatedAt         DateTime                    @updatedAt

  // relations
  images            ProductImage[]
  specifications    ProductSpecificationValue[]
  variants          ProductVariant[]
  attributeSettings ProductAttributeSetting[]
  category          Category                    @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  vendor            Vendor                      @relation(fields: [vendorId], references: [id], onDelete: Cascade)

  approvalStatus    ProductApprovalStatus @default(PENDING)
  approvedById      String?
  approvedBy        User?     @relation("ProductApprover", fields: [approvedById], references: [id])

  warranty          Warranty?
  reviews           Review[]
  messages          Message[]

  @@map("products")
}

enum ProductApprovalStatus {
  PENDING
  ACTIVE
  REJECTED
}

model ProductImage {
  id        String   @id @default(uuid())
  productId String?
  variantId String?

  product   Product?        @relation(fields: [productId], references: [id])
  variant   ProductVariant? @relation(fields: [variantId], references: [id])

  url       String
  altText   String?
  sortOrder Int?
  createdAt DateTime @default(now())
}

model ProductVariant {
  id         String    @id @default(cuid())
  productId  String
  name       String?
  sku        String    @unique
  price      Float
  stock      Int       @default(0)
  weight     Float?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now())

  images     ProductImage[]
  attributes ProductVariantAttribute[]
  product    Product   @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_variants")
}

model ProductVariantAttribute {
  id               String         @id @default(cuid())
  variantId        String
  attributeValueId String

  attributeValue   AttributeValue @relation(fields: [attributeValueId], references: [id], onDelete: Cascade)
  variant          ProductVariant @relation(fields: [variantId], references: [id], onDelete: Cascade)

  @@unique([variantId, attributeValueId])
  @@map("product_variant_attributes")
}

model ProductSpecificationValue {
  id              String        @id @default(cuid())
  productId       String
  specificationId String
  valueString     String?
  valueNumber     Float?

  product         Product       @relation(fields: [productId], references: [id], onDelete: Cascade)
  specification   Specification @relation(fields: [specificationId], references: [id], onDelete: Cascade)

  @@unique([productId, specificationId])
  @@map("product_specification_values")
}

model ProductAttributeSetting {
  id           String    @id @default(cuid())
  productId    String
  attributeId  String
  isVariant    Boolean   @default(false)

  product      Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  attribute    Attribute @relation(fields: [attributeId], references: [id], onDelete: Cascade)

  @@unique([productId, attributeId])
  @@map("product_attribute_settings")
}

model Review {
  id        String   @id @default(cuid())
  userId    String
  productId String
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("reviews")
}

model Specification {
  id         String                      @id @default(cuid())
  name       String
  slug       String                      @unique
  type       SpecificationType
  unit       String?
  createdAt  DateTime                    @default(now())
  updatedAt  DateTime                    @updatedAt

  categories CategorySpecification[]
  values     ProductSpecificationValue[]
  options    SpecificationOption[]

  @@map("specifications")
}

enum SpecificationType {
  TEXT
  NUMBER
  BOOLEAN
  SELECT
}

model SpecificationOption {
  id              String        @id @default(cuid())
  specificationId String
  value           String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @default(now())

  specification   Specification @relation(fields: [specificationId], references: [id], onDelete: Cascade)

  @@unique([specificationId, value])
  @@map("specification_options")
}

model CategorySpecification {
  id              String        @id @default(cuid())
  categoryId      String
  specificationId String
  isRequired      Boolean       @default(false)
  filterable      Boolean       @default(true)

  category        Category      @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  specification   Specification @relation(fields: [specificationId], references: [id], onDelete: Cascade)

  @@unique([categoryId, specificationId])
  @@map("category_specifications")
}

model Warranty {
  id                String        @id @default(cuid())
  productId         String        @unique
  product           Product       @relation(fields: [productId], references: [id], onDelete: Cascade)

  packageWeightValue Float
  packageWeightUnit  WeightUnit
  packageLength      Float
  packageWidth       Float
  packageHeight      Float
  dangerousGoods     DangerousGoods

  duration           Int
  unit               WarrantyUnit
  policy             String?
  type               String

  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt

  @@map("warranties")
}

enum WarrantyUnit {
  DAYS
  MONTHS
  YEARS
}

enum WeightUnit {
  KG
  G
}

enum DangerousGoods {
  NONE
  CONTAINS
}
